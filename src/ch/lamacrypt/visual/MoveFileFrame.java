/* 
 * Copyright (c) 2016, LamaCrypt
 * All rights reserved.
 *
 * The LamaCrypt client software and its source code are available
 * under the LamaCrypt Software License: 
 * https://github.com/LamaCrypt/desktop-client/blob/master/LICENSE.md
 */
package ch.lamacrypt.visual;

import ch.lamacrypt.internal.network.Control;
import java.io.IOException;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 * Frame used to move files
 *
 * @author LamaGuy
 */
public class MoveFileFrame extends javax.swing.JFrame {

    private static Iterator<Map.Entry<String, Long>> dirMapIter;
    private static String cwd;
    private static String[] names;

    /**
     * Creates new form DirectoryView
     *
     * @throws java.io.IOException
     */
    public MoveFileFrame() throws IOException {
        initComponents();
        setLocationRelativeTo(null);
        updateMoveDirTable();
        cwd = Control.cwd();
    }

    static void setParams(String[] names) {
        MoveFileFrame.names = names;
    }

    private void updateMoveDirTable() throws IOException {
        Map<String, Long> dirMap = Control.lsdir(Control.cwd());
        DefaultTableModel dtm = (DefaultTableModel) moveDirTable.getModel();
        int i = 0;

        if (!Control.isAtRoot()) {
            dtm.setRowCount(dirMap.size() + 1);
            moveDirTable.setModel(dtm);
            moveDirTable.setValueAt("..", i, 0);
            moveDirTable.setValueAt("", i, 1);
            i++;
        } else {
            dtm.setRowCount(dirMap.size());
            moveDirTable.setModel(dtm);
        }

        if (!dirMap.isEmpty()) {
            dirMapIter = dirMap.entrySet().iterator();
            while (dirMapIter.hasNext()) {
                Map.Entry<String, Long> entry = dirMapIter.next();
                moveDirTable.setValueAt(entry.getKey(), i, 0);
                moveDirTable.setValueAt(new Date(entry.getValue()), i, 1);
                i++;
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        moveDirTable = new javax.swing.JTable();
        moveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Move file");
        setMinimumSize(new java.awt.Dimension(620, 380));
        setResizable(false);
        setSize(new java.awt.Dimension(620, 380));

        moveDirTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Name", "Date modified"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        moveDirTable.setRowHeight(32);
        moveDirTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                moveDirTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(moveDirTable);
        if (moveDirTable.getColumnModel().getColumnCount() > 0) {
            moveDirTable.getColumnModel().getColumn(1).setMinWidth(200);
            moveDirTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            moveDirTable.getColumnModel().getColumn(1).setMaxWidth(200);
        }

        moveButton.setText("Move here");
        moveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(moveButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(moveButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void moveDirTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveDirTableMouseClicked
        if (evt.getClickCount() == 2) {
            try {
                String newDir = (String) moveDirTable.getValueAt(moveDirTable.
                        getSelectedRow(), 0);
                if (newDir.equals("..")) {
                    Control.cd("..");
                } else {
                    Control.cd(Control.cwd() + newDir + "/");
                }
                updateMoveDirTable();
            } catch (IOException ex) {
                ch.lamacrypt.visual.ErrorHandler.showError(ex);
            }
        }
    }//GEN-LAST:event_moveDirTableMouseClicked

    private void moveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveButtonActionPerformed
        try {
            if (cwd.equals(Control.cwd())) {
                JOptionPane.showMessageDialog(this, "Can't move to the same place !", "Move",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                for (String name : names) {
                    if (!Control.rename(cwd + name, Control.cwd() + name)) {
                        JOptionPane.showMessageDialog(this, "Could not move '" + cwd + name + "'.\n"
                                + "It may be downloaded somewhere else or it is currently shared.", "Delete file",
                                JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                this.dispose();
                Control.cd(cwd);
                DefaultFrame.updateFileTable();
            }
        } catch (IOException ex) {
            ch.lamacrypt.visual.ErrorHandler.showError(ex);
        }
    }//GEN-LAST:event_moveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MoveFileFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MoveFileFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MoveFileFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MoveFileFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new MoveFileFrame().setVisible(true);
            } catch (IOException ex) {
                ch.lamacrypt.visual.ErrorHandler.showError(ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton moveButton;
    private javax.swing.JTable moveDirTable;
    // End of variables declaration//GEN-END:variables

}
